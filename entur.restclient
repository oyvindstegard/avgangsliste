# REST client scratch pad for exploring journey planner and geocoder APIs
# -*- mode: restclient -*-

:CLIENT_H = ET-Client-Name: private-stegard_net
:JP_URL = https://api.entur.io/journey-planner/v3/graphql
:GC_URL = https://api.entur.io/geocoder/v1/autocomplete?boundary.county_ids=03,31,32,33,34,39,40&size=20&layers=venue&categories=:c&text=:q

# Geocoder
:q = ryen
:c = onstreetBus,busStation,coachStation
GET :GC_URL
:CLIENT_H
#

# Fra Tusenfryd til Oslo Bussterminal med Ruter
POST :JP_URL
:CLIENT_H
Accept: application/json
Content-type: application/graphql

{
  trip(
    from: {
      place: "NSR:StopPlace:5143"
      name: "TusenFryd"
    }
    to: {
      place: "NSR:StopPlace:6505"
      name: "Oslo Bussterminal"
    }
    # Bare Ruter-linjer
    whiteListed: {
      authorities:["RUT:Authority:RUT"]
    }
    numTripPatterns: 3
  )
  {
    tripPatterns {
      startTime
      duration
      legs {
        authority {
          name
        }
        fromPlace {
          name
        }
        fromEstimatedCall {
          expectedDepartureTime
          destinationDisplay {
            frontText
          }
          serviceJourney {
            line {
              presentation {
                colour
              }
            }
          }
        }
        toPlace {
          name
        }
        line {
          name
          id
          publicCode
        }
        mode
      }
    }
  }
}
#

# Buss fra Nydalen til Tveita, kun eventuelle avvik.
POST :JP_URL
:CLIENT_H
Accept: application/json
Content-type: application/graphql

{
  trip(
    from: {
      place: "NSR:StopPlace:59605"
      name: "Nydalen T"
    }
    to: {
      place: "NSR:StopPlace:6167"
      name: "Tveita"
    }
    modes: { transportModes: {transportMode: metro}}
    numTripPatterns: 3
  )
  {
    tripPatterns {
      legs {
        situations {
          id
          summary {
            value
            language
          }
          description {
            value
            language
          }
          validityPeriod {
            startTime
            endTime
          }
          reportType
        }
      }
    }
  }
}

# Fra A. Kiellands
POST :JP_URL
:CLIENT_H
Accept: application/json
Content-type: application/graphql

{
  trip(
    to: {
      place: "NSR:StopPlace:5576"
      name: "Dr√∏bak torg, Frogn"
    }
    from: {
      place: "NSR:StopPlace:59872"
      name: "Oslo S, Oslo"
    }
    modes: {transportModes: {transportMode: bus}}
    maximumTransfers: 1
    numTripPatterns: 3
  )
  {
    tripPatterns {
      startTime
      duration
      legs {
        authority {
          name
        }
        fromPlace {
          name
        }
        fromEstimatedCall {
          expectedDepartureTime
          aimedDepartureTime
          destinationDisplay {
            frontText
          }
        }
        toPlace {
          name
        }
        serviceJourney {
          line {
            presentation {
              colour
              textColour
            }
          }
        }
        line {
          name
          id
          publicCode
        }
        mode
      }
    }
  }
}
#

# Vestby til Oslo S med tog
POST :JP_URL
:CLIENT_H
Accept: application/json
Content-type: application/graphql

{
trip(
  from: { place: "NSR:StopPlace:58865" },
  to: { place: "NSR:StopPlace:59872" },
  numTripPatterns: 3,
  modes: { transportModes: {transportMode: rail }},
  maximumTransfers: 1,
  searchWindow: 360
  )
  {
    tripPatterns {
      legs {
        authority {
          name
        }
        fromPlace {
          name
        }
        toPlace {
          name
        }
        fromEstimatedCall {
          expectedDepartureTime
          aimedDepartureTime
          destinationDisplay {
            frontText
          }
          quay {
            publicCode
          }
        }
        line {
          name
          id
          publicCode
          presentation {
            colour
            textColour
          }
        }
        situations {
          summary {
            value
            language
          }
          description {
            value
            language
          }
          validityPeriod {
            startTime
            endTime
          }
        }
        mode
      }
    }
  }
}

# Get list of valid authorities
POST :JP_URL
:CLIENT_H
Accept: application/json
Content-Type: application/graphql

{
   authorities { name, id }
}

# Get list of all situations
POST :JP_URL
:CLIENT_H
Accept: application/json
Content-Type: application/graphql

{
   situations(authorities: ["RUT:Authority:RUT"]) {
     description {
       value
       language
     }
     validityPeriod {
       startTime
       endTime
     }
     reportType
   }
}
#


# Get list of some stop places
POST :JP_URL
:CLIENT_H
Accept: application/json
Content-Type: application/graphql

{
  stopPlaces(ids: ["NSR:StopPlace:5143", "NSR:StopPlace:6505"]) {
    id
    name
  }
}
#